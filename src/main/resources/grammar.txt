LOGIC_OP = KEYWORD(AND) | KEYWORD(OR)
COMP_OP = EQ | LSS | GTR | LEQ | GEQ

------------------------------------------------------------------------------------------------------------------------

primary-expr    : fn-def
                : var-def
                : scope
                : expr

expr            : if-expr
                : for-expr
                : while-expr
                : switch-expr!
                : comparison (LOGIC_OP comparison)*

comparison      : NOT comparison-expr
                : arithmetic ((COMP_OP) arithmetic)*

arithmetic      : term ((PLUS|MINUS) term)*

term            : factor ((MULTIPLY|DIVIDE|MODULO) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : atom (POW factor)*

atom            : INT|LONG|DOUBLE|CHAR|STRING
                : array-lit
                : object-lit
                : IDENTIFIER (EQUALS expr)?
                : LPAREN expr RPAREN



arr-lit         : LBRACKET (expr (COMMA expr)* COMMA?)? RBRACKET
obj-lit         : LBRACE (obj-key! COLON expr (COMMA obj-key! COLON expr)* COMMA?)? RBRACE
obj-key         : identifier
                : string
                : LBRACKET expr RBRACKET

if-expr         : KEYWORD(if) LPAREN expr RPAREN scope (KEYWORD(else) scope)?
for-expr        : KEYWORD(for) LPAREN expr? SEMICOLON expr? SEMICOLON expr? SEMICOLON RPAREN scope
while-expr      : KEYWORD(while) LPAREN expr RPAREN scope
switch-expr!    : KEYWORD(switch) LPAREN expr RPAREN LBRACE !! RBRACE

var-def         : KEYWORD(var) IDENTIFIER (EQUALS expression)?

fn-def          : KEYWORD(fn) IDENTIFIER (LPAREN (fn-def-arg (COMMA fn-def-arg)*)? RPAREN)? (SEMICOLON | strict-scope)
fn-def-arg      : SPREAD? IDENTIFIER (COLON <type>)? (EQUALS expr)?
fn-call         : IDENTIFIER LPAREN expr (COMMA expr)* RPAREN

strict-scope    : LBRACE [expr SEMICOLON+]* RBRACE
scope           : expr SEMICOLON+ | strict-scope
















OLD RULES

------------------------------------------------------------------------------------------------------------------------

expression      : KEYWORD(var) IDENTIFIER EQUALS expression
        \        : comparison/ (LOGIC_OP comparison)*
         \                 /
comparison\     : NOT com/parison-expr
           \    : arithm/etic ((COMP_OP) arithmetic)*
            \          /
arithmetic   \  : ter/m ((PLUS|MINUS) term)*
              \     /
term           \: f/actor ((MUL|DIV) factor)*
                \ /
factor          / \(PLUS|MINUS) factor
              / : p\ower
             /      \
power       /   : ato\m (POW factor)*
           /          \
atom      /     : INT|L\ONG|DOUBLE|STRING
         /      : LPAREN\ expr RPAREN
